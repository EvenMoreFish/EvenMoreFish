/*
 * This file is generated by jOOQ.
 */
package com.oheers.fish.database.generated.mysql.tables;


import com.oheers.fish.database.generated.mysql.DefaultSchema;
import com.oheers.fish.database.generated.mysql.Keys;
import com.oheers.fish.database.generated.mysql.tables.records.FishUserStatsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FishUserStats extends TableImpl<FishUserStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>${table.prefix}fish_user_stats</code>
     */
    public static final FishUserStats FISH_USER_STATS = new FishUserStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FishUserStatsRecord> getRecordType() {
        return FishUserStatsRecord.class;
    }

    /**
     * The column <code>${table.prefix}fish_user_stats.FISH_KEY</code>.
     */
    public final TableField<FishUserStatsRecord, String> FISH_KEY = createField(DSL.name("FISH_KEY"), SQLDataType.VARCHAR(513).nullable(false), this, "");

    /**
     * The column <code>${table.prefix}fish_user_stats.USER_ID</code>.
     */
    public final TableField<FishUserStatsRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>${table.prefix}fish_user_stats.SHORTEST_LENGTH</code>.
     */
    public final TableField<FishUserStatsRecord, Float> SHORTEST_LENGTH = createField(DSL.name("SHORTEST_LENGTH"), SQLDataType.REAL, this, "");

    /**
     * The column <code>${table.prefix}fish_user_stats.LONGEST_LENGTH</code>.
     */
    public final TableField<FishUserStatsRecord, Float> LONGEST_LENGTH = createField(DSL.name("LONGEST_LENGTH"), SQLDataType.REAL, this, "");

    /**
     * The column <code>${table.prefix}fish_user_stats.QUANTITY</code>.
     */
    public final TableField<FishUserStatsRecord, Integer> QUANTITY = createField(DSL.name("QUANTITY"), SQLDataType.INTEGER, this, "");

    private FishUserStats(Name alias, Table<FishUserStatsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FishUserStats(Name alias, Table<FishUserStatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>${table.prefix}fish_user_stats</code> table
     * reference
     */
    public FishUserStats(String alias) {
        this(DSL.name(alias), FISH_USER_STATS);
    }

    /**
     * Create an aliased <code>${table.prefix}fish_user_stats</code> table
     * reference
     */
    public FishUserStats(Name alias) {
        this(alias, FISH_USER_STATS);
    }

    /**
     * Create a <code>${table.prefix}fish_user_stats</code> table reference
     */
    public FishUserStats() {
        this(DSL.name("${table.prefix}fish_user_stats"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<FishUserStatsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    @Override
    public FishUserStats as(String alias) {
        return new FishUserStats(DSL.name(alias), this);
    }

    @Override
    public FishUserStats as(Name alias) {
        return new FishUserStats(alias, this);
    }

    @Override
    public FishUserStats as(Table<?> alias) {
        return new FishUserStats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FishUserStats rename(String name) {
        return new FishUserStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FishUserStats rename(Name name) {
        return new FishUserStats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FishUserStats rename(Table<?> name) {
        return new FishUserStats(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FishUserStats where(Condition condition) {
        return new FishUserStats(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FishUserStats where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FishUserStats where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FishUserStats where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FishUserStats where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FishUserStats where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FishUserStats where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FishUserStats where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FishUserStats whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FishUserStats whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
